'use strict';
const {
    Model
} = require('sequelize');

module.exports = (sequelize, DataTypes) => {
    class Announcement extends Model {
        /**
         * Helper method for defining associations.
         * This method is not a part of Sequelize lifecycle.
         * The `models/index` file will call this method automatically.
         */
        static associate(models) {
            // ƒê·ªãnh nghƒ©a c√°c association n·∫øu c√≥ (V√≠ d·ª•: li√™n k·∫øt v·ªõi b·∫£ng kh√°c)
            // Announcement.belongsTo(models.User, { foreignKey: 'createdBy', targetKey: 'id' });
        }

        /**
         * Check if announcement is currently active based on dates
         */
        isCurrentlyActive() {
            const now = new Date();

            if (!this.isActive) return false;

            if (this.startDate && now < this.startDate) return false;
            if (this.endDate && now > this.endDate) return false;

            return true;
        }
    }

    Announcement.init({
        title: {
            type: DataTypes.STRING,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
                },
                len: {
                    args: [1, 255],
                    msg: 'Ti√™u ƒë·ªÅ ph·∫£i c√≥ t·ª´ 1 ƒë·∫øn 255 k√Ω t·ª±'
                }
            }
        },
        content: {
            type: DataTypes.TEXT,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
                },
                len: {
                    args: [1, 2000],
                    msg: 'N·ªôi dung ph·∫£i c√≥ t·ª´ 1 ƒë·∫øn 2000 k√Ω t·ª±'
                }
            }
        },
        icon: {
            type: DataTypes.ENUM('üì¢', '‚ÑπÔ∏è', '‚úÖ', '‚ö†Ô∏è', 'üéâ', 'üîß', 'üöÄ', 'üéÅ', 'üí∞', '‚ùå'),
            allowNull: false,
            defaultValue: 'üì¢',
            validate: {
                isIn: {
                    args: [['üì¢', '‚ÑπÔ∏è', '‚úÖ', '‚ö†Ô∏è', 'üéâ', 'üîß', 'üöÄ', 'üéÅ', 'üí∞', '‚ùå']],
                    msg: 'Icon kh√¥ng h·ª£p l·ªá'
                }
            }
        },
        type: {
            type: DataTypes.ENUM('info', 'warning', 'success', 'error'),
            allowNull: false,
            defaultValue: 'info',
            validate: {
                isIn: {
                    args: [['info', 'warning', 'success', 'error']],
                    msg: 'Lo·∫°i th√¥ng b√°o kh√¥ng h·ª£p l·ªá'
                }
            }
        },
        priority: {
            type: DataTypes.INTEGER,
            allowNull: false,
            defaultValue: 1,
            validate: {
                min: {
                    args: [1],
                    msg: 'ƒê·ªô ∆∞u ti√™n ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 1'
                },
                max: {
                    args: [5],
                    msg: 'ƒê·ªô ∆∞u ti√™n ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng 5'
                }
            }
        },
        isActive: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: true
        },
        startDate: {
            type: DataTypes.DATE,
            allowNull: true,
            validate: {
                isDate: {
                    msg: 'Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá'
                }
            }
        },
        endDate: {
            type: DataTypes.DATE,
            allowNull: true,
            validate: {
                isDate: {
                    msg: 'Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá'
                }
            }
        },
        isDismissible: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: true
        },
        backgroundColor: {
            type: DataTypes.STRING(7),
            allowNull: false,
            defaultValue: '#3b82f6',
            validate: {
                is: {
                    args: /^#[0-9A-F]{6}$/i,
                    msg: 'M√†u n·ªÅn ph·∫£i l√† m√£ hex h·ª£p l·ªá (VD: #3b82f6)'
                }
            }
        },
        textColor: {
            type: DataTypes.STRING(7),
            allowNull: false,
            defaultValue: '#ffffff',
            validate: {
                is: {
                    args: /^#[0-9A-F]{6}$/i,
                    msg: 'M√†u ch·ªØ ph·∫£i l√† m√£ hex h·ª£p l·ªá (VD: #ffffff)'
                }
            }
        },
        position: {
            type: DataTypes.ENUM('top', 'bottom'),
            allowNull: false,
            defaultValue: 'top',
            validate: {
                isIn: {
                    args: [['top', 'bottom']],
                    msg: 'V·ªã tr√≠ hi·ªÉn th·ªã ph·∫£i l√† top ho·∫∑c bottom'
                }
            }
        }
    }, {
        sequelize,
        modelName: 'Announcement',
        tableName: 'Announcements',
        hooks: {
            beforeValidate: (announcement) => {
                // Validate date range
                if (announcement.startDate && announcement.endDate) {
                    if (announcement.startDate >= announcement.endDate) {
                        throw new Error('Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ng√†y k·∫øt th√∫c');
                    }
                }
            }
        }
    });

    return Announcement;
};
