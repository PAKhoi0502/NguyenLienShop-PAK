import { resolveInclude } from "ejs";
import db from "../models/index"
import bcrypt from 'bcryptjs';
import { where } from "sequelize";
import { checkPhoneNumberExists, checkUserNameExists, generateUniqueUsername, validateVietnamesePhoneNumber } from "../utils/validators";
import { Op } from 'sequelize';
import validator from 'validator';
const { generateAccessToken } = require('../utils/tokenUtils');

let loginUser = async (identifier, password) => {
   try {

      const user = await db.User.findOne({
         where: { phoneNumber: identifier },
         attributes: ['id', 'userName', 'email', 'phoneNumber', 'fullName', 'gender', 'birthday', 'roleId', 'password', 'avatar', 'createdAt', 'updatedAt'],
         include: [{ model: db.Role, attributes: ['name'] }]
      });

      if (!user) {
         return { errCode: 1, errMessage: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!" };
      }

      const match = bcrypt.compareSync(password, user.password);
      if (!match) {
         return { errCode: 3, errMessage: "Sai m·∫≠t kh·∫©u!" };
      }

      // ‚úÖ S·ª≠ d·ª•ng tokenUtils thay v√¨ t·∫°o token tr·ª±c ti·∫øp
      const token = generateAccessToken(user);

      const userPlain = user.get({ plain: true });
      delete userPlain.password;
      delete userPlain.Role;

      return {
         errCode: 0,
         errMessage: "OK",
         token,
         user: userPlain
      };

   } catch (err) {
      return { errCode: -1, errMessage: "Internal server error" };
   }
};
let registerUser = (data) => {
   return new Promise(async (resolve, reject) => {
      try {
         const validRole = await db.Role.findOne({ where: { id: parseInt(data.roleId) } });
         if (!validRole) {
            return resolve({ errCode: 5, errMessage: 'Invalid roleId' });
         }

         if (!data.phoneNumber || !data.password) {
            return resolve({ errCode: 6, errMessage: 'Phone number and password are required' });
         }

         // Validate phone number format
         if (!validateVietnamesePhoneNumber(data.phoneNumber)) {
            return resolve({ errCode: 7, errMessage: 'Invalid Vietnamese phone number format' });
         }

         if (!data.roleId || isNaN(parseInt(data.roleId))) {
            return resolve({ errCode: 5, errMessage: 'Invalid or missing roleId' });
         }

         const errors = [];
         if (!data.phoneVerified && await checkPhoneNumberExists(data.phoneNumber)) {
            errors.push("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!");
         }

         if (errors.length > 0) {
            return resolve({
               errCode: 1,
               errMessage: errors.join(", "),
            });
         }

         let hashPassword = await hashUserPassword(data.password);

         // Generate random username for all users
         const userName = await generateUniqueUsername();

         // T·∫°o ng∆∞·ªùi d√πng m·ªõi
         await db.User.create({
            phoneNumber: data.phoneNumber,
            password: hashPassword,
            userName: userName, // Auto-generated random username
            firstName: data.firstName || null,
            lastName: data.lastName || null,
            address: data.address || null,
            gender: data.gender || null,
            roleId: parseInt(data.roleId) || 2
         });

         resolve({
            errCode: 0,
            message: 'T·∫°o t√†i kho·∫£n th√†nh c√¥ng!'
         });
      } catch (error) {
         reject(error);
      }
   });
};
let hashUserPassword = async (password) => {
   try {
      const salt = await bcrypt.genSalt(10);
      const hashed = await bcrypt.hash(password, salt);
      return hashed;
   } catch (e) {
      throw e;
   }
};

let verifyUserPassword = async (userId, password) => {
   try {
      // Find user by ID with password
      const user = await db.User.findOne({
         where: { id: userId },
         attributes: ['id', 'password', 'roleId', 'userName', 'email', 'phoneNumber', 'fullName', 'gender', 'birthday', 'avatar', 'createdAt', 'updatedAt'],
         include: [{ model: db.Role, attributes: ['name'] }]
      });

      if (!user) {
         return { errCode: 1, errMessage: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" };
      }

      // Verify password
      const match = bcrypt.compareSync(password, user.password);
      if (!match) {
         return { errCode: 3, errMessage: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" };
      }

      return {
         errCode: 0,
         errMessage: "X√°c th·ª±c m·∫≠t kh·∫©u th√†nh c√¥ng!"
      };

   } catch (err) {
      console.error('VerifyUserPassword service error:', err);
      return { errCode: -1, errMessage: "L·ªói server khi x√°c th·ª±c m·∫≠t kh·∫©u!" };
   }
};

// üîÑ FORGOT PASSWORD SERVICES

let requestPasswordReset = async (phoneNumber, ipAddress, userAgent) => {
   try {
      // Check if phone number exists
      const user = await db.User.findOne({
         where: { phoneNumber },
         attributes: ['id', 'phoneNumber', 'userName']
      });

      if (!user) {
         return {
            errCode: 1,
            errMessage: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!"
         };
      }

      // Check if there are too many recent reset requests (rate limiting)
      const recentTokens = await db.PasswordResetToken.findAll({
         where: {
            phoneNumber,
            createdAt: {
               [Op.gte]: new Date(Date.now() - 15 * 60 * 1000) // 15 minutes ago
            }
         }
      });

      if (recentTokens.length >= 3) {
         return {
            errCode: 2,
            errMessage: "B·∫°n ƒë√£ y√™u c·∫ßu qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng ƒë·ª£i 15 ph√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i."
         };
      }

      // Invalidate all previous unused OTP tokens for this phone number
      await db.PasswordResetToken.update(
         {
            isUsed: true
         },
         {
            where: {
               phoneNumber,
               isUsed: false,
               expiresAt: { [Op.gt]: new Date() } // Only invalidate non-expired tokens
            }
         }
      );

      console.log(`üîê Invalidated previous OTP tokens for ${phoneNumber}`);

      // Generate secure reset token
      const crypto = require('crypto');
      const resetToken = crypto.randomBytes(32).toString('hex');
      const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
      const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes

      // Create password reset token record
      const passwordResetToken = await db.PasswordResetToken.create({
         userId: user.id,
         phoneNumber,
         resetToken,
         otpCode,
         expiresAt,
         ipAddress,
         userAgent
      });

      // Send OTP via SMS (using backend SMS service)
      const smsService = await import('./smsService.js');
      const smsResult = await smsService.default.sendOTP(phoneNumber);

      if (!smsResult.success) {
         // If SMS fails, delete the token
         await passwordResetToken.destroy();
         return {
            errCode: 3,
            errMessage: "Kh√¥ng th·ªÉ g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i sau."
         };
      }

      // Update the token with the actual OTP sent
      if (smsResult.otpCode) {
         passwordResetToken.otpCode = smsResult.otpCode;
         await passwordResetToken.save();
      }

      console.log(`üîÑ Password reset requested for ${phoneNumber}, OTP: ${passwordResetToken.otpCode}`);

      return {
         errCode: 0,
         message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra v√† nh·∫≠p m√£ ƒë·ªÉ ti·∫øp t·ª•c.",
         resetToken, // Return for frontend to use in next step
         expiresIn: 15 // minutes
      };

   } catch (error) {
      console.error('RequestPasswordReset service error:', error);
      return { errCode: -1, errMessage: "L·ªói server khi y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!" };
   }
};

let verifyResetOTP = async (phoneNumber, otpCode) => {
   try {
      // Find the most recent valid reset token for this phone number
      const resetToken = await db.PasswordResetToken.findOne({
         where: {
            phoneNumber,
            isUsed: false,
            expiresAt: {
               [Op.gt]: new Date()
            }
         },
         order: [['createdAt', 'DESC']],
         include: [{
            model: db.User,
            as: 'user',
            attributes: ['id', 'phoneNumber']
         }]
      });

      if (!resetToken) {
         return {
            errCode: 1,
            errMessage: "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª≠ l·∫°i."
         };
      }

      // Check if exceeded max attempts
      if (resetToken.attempts >= resetToken.maxAttempts) {
         await resetToken.destroy();
         return {
            errCode: 2,
            errMessage: "ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn nh·∫≠p sai. Vui l√≤ng y√™u c·∫ßu m√£ OTP m·ªõi."
         };
      }

      // Increment attempt counter
      await resetToken.incrementAttempts();

      // Verify OTP
      if (!resetToken.verifyOTP(otpCode)) {
         const remainingAttempts = resetToken.getRemainingAttempts();
         if (remainingAttempts <= 0) {
            await resetToken.destroy();
            return {
               errCode: 3,
               errMessage: "M√£ OTP kh√¥ng ƒë√∫ng v√† ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi.",
               attemptsRemaining: 0
            };
         }

         return {
            errCode: 4,
            errMessage: `M√£ OTP kh√¥ng ƒë√∫ng. C√≤n ${remainingAttempts} l·∫ßn th·ª≠.`,
            attemptsRemaining: remainingAttempts
         };
      }

      console.log(`‚úÖ OTP verified successfully for ${phoneNumber}`);

      return {
         errCode: 0,
         message: "X√°c th·ª±c OTP th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒë·∫∑t m·∫≠t kh·∫©u m·ªõi.",
         resetToken: resetToken.resetToken, // Return the reset token for password change
         userId: resetToken.user.id
      };

   } catch (error) {
      console.error('VerifyResetOTP service error:', error);
      return { errCode: -1, errMessage: "L·ªói server khi x√°c th·ª±c OTP!" };
   }
};

let resetPassword = async (resetToken, newPassword) => {
   try {
      // Validate new password
      if (!newPassword || newPassword.length < 6) {
         return {
            errCode: 1,
            errMessage: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±."
         };
      }

      // Find and validate reset token
      const passwordResetToken = await db.PasswordResetToken.findValidToken(resetToken);

      if (!passwordResetToken) {
         return {
            errCode: 2,
            errMessage: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n."
         };
      }

      // Hash new password
      const newHashedPassword = await hashUserPassword(newPassword);

      // Update user password
      await db.User.update(
         { password: newHashedPassword },
         { where: { id: passwordResetToken.userId } }
      );

      // Mark token as used
      await passwordResetToken.markAsUsed();

      // Invalidate all refresh tokens for this user (force re-login)
      await db.RefreshToken.update(
         { isActive: false },
         { where: { userId: passwordResetToken.userId } }
      );

      console.log(`üîê Password reset successfully for user ${passwordResetToken.userId}`);

      return {
         errCode: 0,
         message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
      };

   } catch (error) {
      console.error('ResetPassword service error:', error);
      return { errCode: -1, errMessage: "L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!" };
   }
};

// üóëÔ∏è Clear OTP data for phone number (for when user goes back to step 1)
let clearOTPForPhone = async (phoneNumber) => {
   try {
      console.log('üóëÔ∏è Clearing OTP for phone:', phoneNumber);

      // Delete OTP record from database
      const deletedCount = await db.PasswordResetToken.destroy({
         where: { phoneNumber: phoneNumber }
      });

      console.log(`üóëÔ∏è Deleted ${deletedCount} OTP records for phone: ${phoneNumber}`);

      return {
         errCode: 0,
         errMessage: 'OTP ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!'
      };

   } catch (error) {
      console.error('ClearOTPForPhone service error:', error);
      return {
         errCode: -1,
         errMessage: 'L·ªói server khi x√≥a OTP!'
      };
   }
};

// üîÑ CHANGE PASSWORD SERVICES (for authenticated users)

let requestChangePassword = async (userId, currentPassword, ipAddress, userAgent) => {
   try {
      // 1. Verify user exists and get their data (including phoneNumber)
      const user = await db.User.findOne({
         where: { id: userId },
         attributes: ['id', 'phoneNumber', 'password', 'userName']
      });

      if (!user) {
         return {
            errCode: 1,
            errMessage: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!"
         };
      }

      // 2. Verify current password
      const match = bcrypt.compareSync(currentPassword, user.password);
      if (!match) {
         return {
            errCode: 2,
            errMessage: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c!"
         };
      }

      // 3. Get phoneNumber from database (not from parameter)
      const phoneNumber = user.phoneNumber;

      if (!phoneNumber) {
         return {
            errCode: 3,
            errMessage: "T√†i kho·∫£n ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i!"
         };
      }

      // 4. Rate limiting - check recent requests
      const recentTokens = await db.PasswordResetToken.findAll({
         where: {
            phoneNumber,
            createdAt: {
               [Op.gte]: new Date(Date.now() - 15 * 60 * 1000) // 15 minutes
            }
         }
      });

      if (recentTokens.length >= 3) {
         return {
            errCode: 4,
            errMessage: "B·∫°n ƒë√£ y√™u c·∫ßu qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng ƒë·ª£i 15 ph√∫t."
         };
      }

      // 5. Invalidate all previous unused OTP tokens for this phone number
      await db.PasswordResetToken.update(
         {
            isUsed: true
         },
         {
            where: {
               phoneNumber,
               isUsed: false,
               expiresAt: { [Op.gt]: new Date() } // Only invalidate non-expired tokens
            }
         }
      );

      console.log(`üîÑ Invalidated previous OTP tokens for ${phoneNumber}`);

      // 6. Generate reset token and OTP
      const crypto = require('crypto');
      const resetToken = crypto.randomBytes(32).toString('hex');
      const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
      const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes

      // 7. Create password reset token
      const passwordResetToken = await db.PasswordResetToken.create({
         userId: user.id,
         phoneNumber,
         resetToken,
         otpCode,
         expiresAt,
         ipAddress,
         userAgent
      });

      // 8. Send OTP via SMS
      const smsService = await import('./smsService.js');
      const smsResult = await smsService.default.sendOTP(phoneNumber);

      if (!smsResult.success) {
         await passwordResetToken.destroy();
         return {
            errCode: 5,
            errMessage: "Kh√¥ng th·ªÉ g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i."
         };
      }

      // 9. Update token with actual OTP sent
      if (smsResult.otpCode) {
         passwordResetToken.otpCode = smsResult.otpCode;
         await passwordResetToken.save();
      }

      console.log(`üîÑ Change password OTP sent to ${phoneNumber}, OTP: ${passwordResetToken.otpCode}`);

      return {
         errCode: 0,
         message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n.",
         resetToken,
         expiresIn: 15
      };

   } catch (error) {
      console.error('RequestChangePassword service error:', error);
      return { errCode: -1, errMessage: "L·ªói server!" };
   }
};

// üîê Change password with verified OTP
let changePassword = async (resetToken, newPassword) => {
   try {
      // Validate new password
      if (!newPassword || newPassword.length < 6) {
         return {
            errCode: 1,
            errMessage: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±."
         };
      }

      // Find and validate reset token
      const passwordResetToken = await db.PasswordResetToken.findValidToken(resetToken);

      if (!passwordResetToken) {
         return {
            errCode: 2,
            errMessage: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n."
         };
      }

      // Get current password to prevent using same password
      const user = await db.User.findOne({
         where: { id: passwordResetToken.userId },
         attributes: ['id', 'password']
      });

      // üîí Security: Check if new password is same as old password
      const isSamePassword = bcrypt.compareSync(newPassword, user.password);
      if (isSamePassword) {
         return {
            errCode: 3,
            errMessage: "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©!"
         };
      }

      // Hash new password
      const newHashedPassword = await hashUserPassword(newPassword);

      // Update user password
      await db.User.update(
         { password: newHashedPassword },
         { where: { id: passwordResetToken.userId } }
      );

      // Mark token as used
      await passwordResetToken.markAsUsed();

      // üîí Security: Invalidate all refresh tokens (force re-login on all devices)
      await db.RefreshToken.update(
         { isActive: false },
         { where: { userId: passwordResetToken.userId } }
      );

      console.log(`üîê Password changed successfully for user ${passwordResetToken.userId}`);

      return {
         errCode: 0,
         message: "Thay ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
      };

   } catch (error) {
      console.error('ChangePassword service error:', error);
      return { errCode: -1, errMessage: "L·ªói server!" };
   }
};

// üìß UPDATE EMAIL SERVICES (NEW FLOW - for authenticated users)
// Flow: Email input ‚Üí OTP to email ‚Üí Verify OTP ‚Üí Update

let sendEmailOTP = async (userId, newEmail, ipAddress, userAgent) => {
   try {
      // 1. Validate email format
      if (!newEmail || !validator.isEmail(newEmail)) {
         return {
            errCode: 1,
            errMessage: "Email kh√¥ng h·ª£p l·ªá."
         };
      }

      // 2. Verify user exists
      const user = await db.User.findOne({
         where: { id: userId },
         attributes: ['id', 'email', 'userName', 'phoneNumber']
      });

      if (!user) {
         return {
            errCode: 2,
            errMessage: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!"
         };
      }

      // 3. Check if email already exists (for another user)
      const emailExists = await db.User.findOne({
         where: {
            email: newEmail,
            id: { [Op.ne]: userId }
         }
      });

      if (emailExists) {
         return {
            errCode: 3,
            errMessage: "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c!"
         };
      }

      // 4. Rate limiting (use email as identifier)
      const recentTokens = await db.PasswordResetToken.findAll({
         where: {
            userId,
            createdAt: {
               [Op.gte]: new Date(Date.now() - 15 * 60 * 1000)
            }
         }
      });

      if (recentTokens.length >= 3) {
         return {
            errCode: 4,
            errMessage: "B·∫°n ƒë√£ y√™u c·∫ßu qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng ƒë·ª£i 15 ph√∫t."
         };
      }

      // 5. Invalidate all previous unused OTP tokens for this user
      await db.PasswordResetToken.update(
         {
            isUsed: true
         },
         {
            where: {
               userId,
               isUsed: false,
               expiresAt: { [Op.gt]: new Date() }
            }
         }
      );

      console.log(`üìß Invalidated previous OTP tokens for user ${userId}`);

      // 6. Generate token and OTP
      const crypto = require('crypto');
      const resetToken = crypto.randomBytes(32).toString('hex');
      const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
      const expiresAt = new Date(Date.now() + 15 * 60 * 1000);

      // 7. Create password reset token (store target email in phoneNumber field temporarily)
      const passwordResetToken = await db.PasswordResetToken.create({
         userId: user.id,
         phoneNumber: newEmail, // Store target email here
         resetToken,
         otpCode,
         expiresAt,
         ipAddress,
         userAgent
      });

      // 8. Send OTP via Email (mocked for now, log to console)
      // TODO: Implement real email service later
      console.log(`üìß ========================================`);
      console.log(`üìß UPDATE EMAIL OTP`);
      console.log(`üìß To: ${newEmail}`);
      console.log(`üìß OTP Code: ${otpCode}`);
      console.log(`üìß Expires in: 15 minutes`);
      console.log(`üìß ========================================`);

      return {
         errCode: 0,
         message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.",
         resetToken,
         expiresIn: 15,
         hasEmail: !!user.email,
         currentEmail: user.email,
         targetEmail: newEmail // Return target email for UI display
      };

   } catch (error) {
      console.error('SendEmailOTP service error:', error);
      return { errCode: -1, errMessage: "L·ªói server!" };
   }
};

// üìß Verify email OTP and update email
let verifyEmailOTPAndUpdate = async (resetToken, otpCode) => {
   try {
      // 1. Find reset token
      const passwordResetToken = await db.PasswordResetToken.findOne({
         where: {
            resetToken,
            isUsed: false,
            expiresAt: { [Op.gt]: new Date() }
         }
      });

      if (!passwordResetToken) {
         return {
            errCode: 1,
            errMessage: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n."
         };
      }

      // 2. Check attempts
      if (passwordResetToken.attempts >= 3) {
         return {
            errCode: 2,
            errMessage: "B·∫°n ƒë√£ nh·∫≠p sai OTP qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i."
         };
      }

      // 3. Verify OTP
      if (passwordResetToken.otpCode !== otpCode) {
         // Increment attempts
         await passwordResetToken.update({
            attempts: passwordResetToken.attempts + 1
         });

         const remainingAttempts = 3 - (passwordResetToken.attempts + 1);
         return {
            errCode: 3,
            errMessage: `M√£ OTP kh√¥ng ƒë√∫ng. C√≤n ${remainingAttempts} l·∫ßn th·ª≠.`,
            attemptsRemaining: remainingAttempts
         };
      }

      // 4. OTP correct - Get target email from phoneNumber field
      const newEmail = passwordResetToken.phoneNumber; // We stored email here

      // 5. Validate email format
      if (!newEmail || !validator.isEmail(newEmail)) {
         return {
            errCode: 4,
            errMessage: "Email kh√¥ng h·ª£p l·ªá."
         };
      }

      // 6. Check if email already exists (for another user)
      const emailExists = await db.User.findOne({
         where: {
            email: newEmail,
            id: { [Op.ne]: passwordResetToken.userId }
         }
      });

      if (emailExists) {
         return {
            errCode: 5,
            errMessage: "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c!"
         };
      }

      // 7. Update user email
      await db.User.update(
         { email: newEmail },
         { where: { id: passwordResetToken.userId } }
      );

      // 8. Mark token as used
      await passwordResetToken.markAsUsed();

      console.log(`üìß Email updated successfully for user ${passwordResetToken.userId} to ${newEmail}`);

      return {
         errCode: 0,
         message: "C·∫≠p nh·∫≠t email th√†nh c√¥ng!"
      };

   } catch (error) {
      console.error('VerifyEmailOTPAndUpdate service error:', error);
      return { errCode: -1, errMessage: "L·ªói server!" };
   }
};

export default {
   loginUser,
   registerUser,
   verifyUserPassword,
   requestPasswordReset,
   verifyResetOTP,
   resetPassword,
   clearOTPForPhone,
   requestChangePassword,
   changePassword,
   sendEmailOTP,
   verifyEmailOTPAndUpdate
}