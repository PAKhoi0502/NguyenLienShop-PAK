/**
 * Backend SMS Service for OTP functionality
 * Logs to console instead of sending real SMS
 * Perfect for development and testing
 */

// Store OTP codes in memory for development (don't use in production)
const otpStore = new Map();

/**
 * Generate 6-digit OTP code
 */
const generateOTP = () => {
    return Math.floor(100000 + Math.random() * 900000).toString();
};

/**
 * Send OTP to phone number (Mock - logs to console)
 * @param {string} phoneNumber - Vietnamese phone number
 * @returns {Promise<{success: boolean, message: string, otpCode?: string}>}
 */
const sendOTP = async (phoneNumber) => {
    try {
        // Simulate network delay
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Generate OTP
        const otpCode = generateOTP();

        // Store OTP with expiration time (5 minutes)
        const expiresAt = Date.now() + (5 * 60 * 1000);
        otpStore.set(phoneNumber, {
            code: otpCode,
            expiresAt,
            attempts: 0,
            maxAttempts: 3
        });

        // Mock console log instead of real SMS
        console.log(`üì± [BACKEND SMS SERVICE] ===========================`);
        console.log(`üìû G·ª≠i OTP ƒë·∫øn: ${phoneNumber}`);
        console.log(`üî¢ M√£ OTP: ${otpCode}`);
        console.log(`‚è∞ C√≥ hi·ªáu l·ª±c: 5 ph√∫t`);
        console.log(`üì± [SMS] N·ªôi dung: "NguyenLienShop - M√£ x√°c th·ª±c: ${otpCode}. C√≥ hi·ªáu l·ª±c 5 ph√∫t."`);
        console.log(`===============================================`);

        return {
            success: true,
            message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n",
            // Include OTP for development only (remove in production)
            otpCode: process.env.NODE_ENV === 'development' ? otpCode : undefined
        };

    } catch (error) {
        console.error(`‚ùå [BACKEND SMS ERROR]:`, error);
        return {
            success: false,
            message: "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i."
        };
    }
};

/**
 * Verify OTP code
 * @param {string} phoneNumber - Vietnamese phone number
 * @param {string} otpCode - 6-digit OTP code
 * @returns {Promise<{success: boolean, message: string}>}
 */
const verifyOTP = async (phoneNumber, otpCode) => {
    try {
        // Simulate network delay
        await new Promise(resolve => setTimeout(resolve, 500));

        const storedOTP = otpStore.get(phoneNumber);

        if (!storedOTP) {
            console.log(`‚ùå [BACKEND VERIFY] Kh√¥ng t√¨m th·∫•y OTP cho s·ªë: ${phoneNumber}`);
            return {
                success: false,
                message: "M√£ OTP kh√¥ng t·ªìn t·∫°i. Vui l√≤ng g·ª≠i l·∫°i m√£ m·ªõi."
            };
        }

        // Check expiration
        if (Date.now() > storedOTP.expiresAt) {
            console.log(`‚è∞ [BACKEND VERIFY] OTP ƒë√£ h·∫øt h·∫°n cho s·ªë: ${phoneNumber}`);
            otpStore.delete(phoneNumber);
            return {
                success: false,
                message: "M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng g·ª≠i l·∫°i m√£ m·ªõi."
            };
        }

        // Check max attempts
        if (storedOTP.attempts >= storedOTP.maxAttempts) {
            console.log(`üö´ [BACKEND VERIFY] V∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ cho s·ªë: ${phoneNumber}`);
            otpStore.delete(phoneNumber);
            return {
                success: false,
                message: "B·∫°n ƒë√£ nh·∫≠p sai qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng g·ª≠i l·∫°i m√£ m·ªõi."
            };
        }

        // Increment attempt counter
        storedOTP.attempts += 1;
        otpStore.set(phoneNumber, storedOTP);

        // Verify code
        if (otpCode === storedOTP.code) {
            console.log(`‚úÖ [BACKEND VERIFY] OTP h·ª£p l·ªá cho s·ªë: ${phoneNumber}`);
            // Remove OTP after successful verification
            otpStore.delete(phoneNumber);
            return {
                success: true,
                message: "X√°c th·ª±c OTP th√†nh c√¥ng!"
            };
        } else {
            console.log(`‚ùå [BACKEND VERIFY] OTP kh√¥ng ƒë√∫ng. L·∫ßn th·ª≠: ${storedOTP.attempts}/${storedOTP.maxAttempts}`);
            return {
                success: false,
                message: `M√£ OTP kh√¥ng ƒë√∫ng. C√≤n ${storedOTP.maxAttempts - storedOTP.attempts} l·∫ßn th·ª≠.`
            };
        }

    } catch (error) {
        console.error(`‚ùå [BACKEND VERIFY ERROR]:`, error);
        return {
            success: false,
            message: "ƒê√£ x·∫£y ra l·ªói khi x√°c th·ª±c OTP. Vui l√≤ng th·ª≠ l·∫°i."
        };
    }
};

/**
 * Clear stored OTP (for cleanup)
 * @param {string} phoneNumber - Vietnamese phone number
 */
const clearOTP = (phoneNumber) => {
    otpStore.delete(phoneNumber);
    console.log(`üóëÔ∏è [BACKEND CLEAR] ƒê√£ x√≥a OTP cho s·ªë: ${phoneNumber}`);
};

export default {
    sendOTP,
    verifyOTP,
    clearOTP
};