import announcementService from '../services/announcementService.js';

// ==============================================
// üì¢ GET ALL ANNOUNCEMENTS
// ==============================================
let handleGetAnnouncements = async (req, res) => {
    try {
        const announcements = await announcementService.getAnnouncements();
        res.status(200).json({
            errCode: 0,
            errMessage: 'L·∫•y danh s√°ch th√¥ng b√°o th√†nh c√¥ng',
            announcements: announcements
        });
    } catch (err) {
        console.error('Error in handleGetAnnouncements:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi l·∫•y danh s√°ch th√¥ng b√°o: ' + err.message });
    }
};

// ==============================================
// üì¢ GET ANNOUNCEMENT BY ID
// ==============================================
let handleGetAnnouncementById = async (req, res) => {
    try {
        const { id } = req.params;

        if (!id) {
            return res.status(400).json({ errCode: 1, errMessage: 'ID th√¥ng b√°o l√† b·∫Øt bu·ªôc' });
        }

        const announcement = await announcementService.getAnnouncementById(id);

        if (!announcement) {
            return res.status(404).json({ errCode: 1, errMessage: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' });
        }

        res.status(200).json({
            errCode: 0,
            errMessage: 'L·∫•y th√¥ng tin th√¥ng b√°o th√†nh c√¥ng',
            announcement: announcement
        });
    } catch (err) {
        console.error('Error in handleGetAnnouncementById:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi l·∫•y th√¥ng tin th√¥ng b√°o: ' + err.message });
    }
};

// ==============================================
// üì¢ CREATE ANNOUNCEMENT
// ==============================================
let handleCreateAnnouncement = async (req, res) => {
    try {
        const {
            title,
            content,
            icon,
            type,
            priority,
            isActive,
            startDate,
            endDate,
            isDismissible,
            backgroundColor,
            textColor,
            position
        } = req.body;

        // Validate required fields
        if (!title || !content) {
            return res.status(400).json({
                errCode: 1,
                errMessage: 'Ti√™u ƒë·ªÅ v√† n·ªôi dung l√† b·∫Øt bu·ªôc'
            });
        }

        const announcementData = {
            title,
            content,
            icon,
            type,
            priority,
            isActive,
            startDate,
            endDate,
            isDismissible,
            backgroundColor,
            textColor,
            position
        };

        const announcement = await announcementService.createAnnouncement(announcementData);

        res.status(201).json({
            errCode: 0,
            errMessage: 'T·∫°o th√¥ng b√°o th√†nh c√¥ng',
            announcement: announcement
        });
    } catch (err) {
        console.error('Error in handleCreateAnnouncement:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi t·∫°o th√¥ng b√°o: ' + err.message });
    }
};

// ==============================================
// üì¢ UPDATE ANNOUNCEMENT
// ==============================================
let handleUpdateAnnouncement = async (req, res) => {
    try {
        const { id } = req.params;
        const updateData = req.body;

        if (!id) {
            return res.status(400).json({ errCode: 1, errMessage: 'ID th√¥ng b√°o l√† b·∫Øt bu·ªôc' });
        }

        const result = await announcementService.updateAnnouncement(id, updateData);

        if (result.errCode !== 0) {
            return res.status(400).json(result);
        }

        res.status(200).json(result);
    } catch (err) {
        console.error('Error in handleUpdateAnnouncement:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o: ' + err.message });
    }
};

// ==============================================
// üì¢ DELETE ANNOUNCEMENT
// ==============================================
let handleDeleteAnnouncement = async (req, res) => {
    try {
        const { id } = req.params;

        if (!id) {
            return res.status(400).json({ errCode: 1, errMessage: 'ID th√¥ng b√°o l√† b·∫Øt bu·ªôc' });
        }

        const result = await announcementService.deleteAnnouncement(id);

        if (result.errCode !== 0) {
            return res.status(404).json(result);
        }

        res.status(200).json(result);
    } catch (err) {
        console.error('Error in handleDeleteAnnouncement:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi x√≥a th√¥ng b√°o: ' + err.message });
    }
};

// ==============================================
// üì¢ TOGGLE ANNOUNCEMENT STATUS
// ==============================================
let handleToggleAnnouncementStatus = async (req, res) => {
    try {
        const { id } = req.params;

        if (!id) {
            return res.status(400).json({ errCode: 1, errMessage: 'ID th√¥ng b√°o l√† b·∫Øt bu·ªôc' });
        }

        const result = await announcementService.toggleAnnouncementStatus(id);

        if (result.errCode !== 0) {
            return res.status(404).json(result);
        }

        res.status(200).json(result);
    } catch (err) {
        console.error('Error in handleToggleAnnouncementStatus:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i th√¥ng b√°o: ' + err.message });
    }
};

// ==============================================
// üì¢ GET ACTIVE ANNOUNCEMENTS (PUBLIC API)
// ==============================================
let handleGetActiveAnnouncements = async (req, res) => {
    try {
        const announcements = await announcementService.getActiveAnnouncements();
        res.status(200).json({
            errCode: 0,
            errMessage: 'L·∫•y th√¥ng b√°o ƒëang ho·∫°t ƒë·ªông th√†nh c√¥ng',
            announcements: announcements
        });
    } catch (err) {
        console.error('Error in handleGetActiveAnnouncements:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi l·∫•y th√¥ng b√°o ƒëang ho·∫°t ƒë·ªông: ' + err.message });
    }
};

// ==============================================
// üì¢ GET ANNOUNCEMENTS BY TYPE
// ==============================================
let handleGetAnnouncementsByType = async (req, res) => {
    try {
        const { type } = req.params;

        if (!type) {
            return res.status(400).json({ errCode: 1, errMessage: 'Lo·∫°i th√¥ng b√°o l√† b·∫Øt bu·ªôc' });
        }

        const announcements = await announcementService.getAnnouncementsByType(type);
        res.status(200).json({
            errCode: 0,
            errMessage: `L·∫•y th√¥ng b√°o lo·∫°i ${type} th√†nh c√¥ng`,
            announcements: announcements
        });
    } catch (err) {
        console.error('Error in handleGetAnnouncementsByType:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi l·∫•y th√¥ng b√°o theo lo·∫°i: ' + err.message });
    }
};

// ==============================================
// üì¢ GET ANNOUNCEMENTS BY POSITION
// ==============================================
let handleGetAnnouncementsByPosition = async (req, res) => {
    try {
        const { position } = req.params;

        if (!position) {
            return res.status(400).json({ errCode: 1, errMessage: 'V·ªã tr√≠ th√¥ng b√°o l√† b·∫Øt bu·ªôc' });
        }

        const announcements = await announcementService.getAnnouncementsByPosition(position);
        res.status(200).json({
            errCode: 0,
            errMessage: `L·∫•y th√¥ng b√°o v·ªã tr√≠ ${position} th√†nh c√¥ng`,
            announcements: announcements
        });
    } catch (err) {
        console.error('Error in handleGetAnnouncementsByPosition:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi l·∫•y th√¥ng b√°o theo v·ªã tr√≠: ' + err.message });
    }
};

// ==============================================
// üì¢ SEARCH ANNOUNCEMENTS
// ==============================================
let handleSearchAnnouncements = async (req, res) => {
    try {
        const { q } = req.query;

        if (!q) {
            return res.status(400).json({ errCode: 1, errMessage: 'T·ª´ kh√≥a t√¨m ki·∫øm l√† b·∫Øt bu·ªôc' });
        }

        const announcements = await announcementService.searchAnnouncements(q);
        res.status(200).json({
            errCode: 0,
            errMessage: `T√¨m ki·∫øm th√¥ng b√°o v·ªõi t·ª´ kh√≥a "${q}" th√†nh c√¥ng`,
            announcements: announcements
        });
    } catch (err) {
        console.error('Error in handleSearchAnnouncements:', err.message, err.stack);
        res.status(500).json({ errCode: -1, errMessage: 'L·ªói khi t√¨m ki·∫øm th√¥ng b√°o: ' + err.message });
    }
};

export default {
    handleGetAnnouncements,
    handleGetAnnouncementById,
    handleCreateAnnouncement,
    handleUpdateAnnouncement,
    handleDeleteAnnouncement,
    handleToggleAnnouncementStatus,
    handleGetActiveAnnouncements,
    handleGetAnnouncementsByType,
    handleGetAnnouncementsByPosition,
    handleSearchAnnouncements
};
