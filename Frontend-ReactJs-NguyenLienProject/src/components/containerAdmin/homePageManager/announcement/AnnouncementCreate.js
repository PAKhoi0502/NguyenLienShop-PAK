import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import CustomToast from '../../../../components/CustomToast';
import { createAnnouncement } from '../../../../services/announcementService';
import { useIntl, FormattedMessage } from 'react-intl';
import HintBox from '../../../../components/HintBox';
import './AnnouncementCreate.scss';

const AnnouncementCreate = () => {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
    const [icon, setIcon] = useState('üì¢');
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();
    const intl = useIntl();

    // Predefined emoji icons for selection
    const emojiIcons = [
        {
            value: 'üì¢',
            label: `üì¢ ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.general_icon',
                defaultMessage: 'Th√¥ng b√°o chung'
            })}`
        },
        {
            value: '‚ÑπÔ∏è',
            label: `‚ÑπÔ∏è ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.info_icon',
                defaultMessage: 'Th√¥ng tin'
            })}`
        },
        {
            value: '‚úÖ',
            label: `‚úÖ ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.success_icon',
                defaultMessage: 'Th√†nh c√¥ng'
            })}`
        },
        {
            value: '‚ö†Ô∏è',
            label: `‚ö†Ô∏è ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.warning_icon',
                defaultMessage: 'C·∫£nh b√°o'
            })}`
        },
        {
            value: 'üéâ',
            label: `üéâ ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.celebration_icon',
                defaultMessage: 'Ch√∫c m·ª´ng'
            })}`
        },
        {
            value: 'üîß',
            label: `üîß ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.maintenance_icon',
                defaultMessage: 'B·∫£o tr√¨'
            })}`
        },
        {
            value: 'üöÄ',
            label: `üöÄ ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.update_icon',
                defaultMessage: 'C·∫≠p nh·∫≠t'
            })}`
        },
        {
            value: 'üéÅ',
            label: `üéÅ ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.promotion_icon',
                defaultMessage: 'Khuy·∫øn m√£i'
            })}`
        },
        {
            value: 'üí∞',
            label: `üí∞ ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.discount_icon',
                defaultMessage: 'Gi·∫£m gi√°'
            })}`
        },
        {
            value: '‚ùå',
            label: `‚ùå ${intl.formatMessage({
                id: 'body_admin.announcement_management.create.error_icon',
                defaultMessage: 'L·ªói'
            })}`
        }
    ];

    const handleSubmit = async (e) => {
        e.preventDefault();

        // Validation
        if (!title.trim()) {
            showToast("error", intl.formatMessage({
                id: 'body_admin.announcement_management.create.no_title',
                defaultMessage: 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o'
            }));
            return;
        }

        if (!content.trim()) {
            showToast("error", intl.formatMessage({
                id: 'body_admin.announcement_management.create.no_content',
                defaultMessage: 'Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o'
            }));
            return;
        }

        setLoading(true);

        const data = {
            title: title.trim(),
            content: content.trim(),
            icon: icon,
            type: 'info',
            priority: 1,
            isActive: false,
            isDismissible: true,
            backgroundColor: '#3b82f6',
            textColor: '#ffffff',
            position: 'top',
            startDate: null,
            endDate: null
        };

        try {
            const res = await createAnnouncement(data);

            if (res && res.errCode === 0) {
                showToast("success", intl.formatMessage({
                    id: 'body_admin.announcement_management.create.success',
                    defaultMessage: 'T·∫°o th√¥ng b√°o th√†nh c√¥ng'
                }));
                navigate('/admin/homepage-management/announcement-management');
            } else {
                showToast("error", res.errMessage || intl.formatMessage({
                    id: 'body_admin.announcement_management.create.error',
                    defaultMessage: 'Kh√¥ng th·ªÉ t·∫°o th√¥ng b√°o'
                }));
            }
        } catch (err) {
            console.error('Create announcement error:', err);
            showToast("error", intl.formatMessage({
                id: 'body_admin.announcement_management.create.server_error',
                defaultMessage: 'L·ªói server khi t·∫°o th√¥ng b√°o'
            }));
        } finally {
            setLoading(false);
        }
    };

    const showToast = (type, message) => {
        toast(
            (props) => (
                <CustomToast
                    {...props}
                    type={type}
                    titleId={type === "success" ? "body_admin.announcement_management.create.create_success_title" : "body_admin.announcement_management.create.create_error_title"}
                    message={message}
                    time={new Date()}
                />
            ),
            { closeButton: false, type }
        );
    };

    // Preview style is now handled by CSS class

    return (
        <div className="announcement-create-container">
            <HintBox
                content={
                    <div>
                        <p><FormattedMessage id="body_admin.announcement_management.create.hint.title" defaultMessage="H∆∞·ªõng d·∫´n t·∫°o th√¥ng b√°o:" /></p>
                        <ul style={{ textAlign: 'left', paddingLeft: '1rem', marginTop: '0.5rem' }}>
                            <li><FormattedMessage id="body_admin.announcement_management.create.hint.1" defaultMessage="Ti√™u ƒë·ªÅ l√† b·∫Øt bu·ªôc, n·ªôi dung l√† t√πy ch·ªçn" /></li>
                            <li><FormattedMessage id="body_admin.announcement_management.create.hint.2" defaultMessage="Ch·ªçn bi·ªÉu t∆∞·ª£ng ph√π h·ª£p v·ªõi n·ªôi dung th√¥ng b√°o" /></li>
                            <li><FormattedMessage id="body_admin.announcement_management.create.hint.3" defaultMessage="Th√¥ng b√°o ƒë∆∞·ª£c t·∫°o ·ªü tr·∫°ng th√°i ·∫©n - s·ª≠ d·ª•ng ch·ª©c nƒÉng 'Hi·ªÉn th·ªã' ƒë·ªÉ k√≠ch ho·∫°t" /></li>
                            <li><FormattedMessage id="body_admin.announcement_management.create.hint.4" defaultMessage="Format hi·ªÉn th·ªã: [Icon] Ti√™u ƒë·ªÅ - N·ªôi dung" /></li>
                            <li><FormattedMessage id="body_admin.announcement_management.create.hint.5" defaultMessage="C√°c c√†i ƒë·∫∑t kh√°c (m√†u s·∫Øc, v·ªã tr√≠) s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông thi·∫øt l·∫≠p" /></li>
                        </ul>
                    </div>
                }
            />

            <h1><FormattedMessage id="body_admin.announcement_management.create.title" defaultMessage="T·∫°o Th√¥ng B√°o M·ªõi" /></h1>

            <form onSubmit={handleSubmit} className="announcement-create-form">
                {/* Basic Information */}
                <div className="form-section">

                    <div className="form-group">
                        <label>
                            <FormattedMessage id="body_admin.announcement_management.create.icon" defaultMessage="Bi·ªÉu t∆∞·ª£ng:" />
                        </label>
                        <select
                            value={icon}
                            onChange={(e) => setIcon(e.target.value)}
                            className="icon-select"
                        >
                            {emojiIcons.map(iconOption => (
                                <option key={iconOption.value} value={iconOption.value}>
                                    {iconOption.label}
                                </option>
                            ))}
                        </select>
                        <small>
                            {intl.formatMessage({
                                id: 'body_admin.announcement_management.create.icon_selected',
                                defaultMessage: 'ƒê√£ ch·ªçn:'
                            })} <span>{icon}</span>
                        </small>
                    </div>

                    <div className="form-group">
                        <label>
                            <FormattedMessage id="body_admin.announcement_management.create.title_label" defaultMessage="Ti√™u ƒë·ªÅ:" />
                            <span>*</span>
                        </label>
                        <input
                            type="text"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            placeholder={intl.formatMessage({
                                id: 'body_admin.announcement_management.create.title_placeholder',
                                defaultMessage: 'Nh·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o'
                            })}
                            required
                        />
                    </div>

                    <div className="form-group">
                        <label>
                            <FormattedMessage id="body_admin.announcement_management.create.content_label" defaultMessage="N·ªôi dung:" />
                        </label>
                        <textarea
                            value={content}
                            onChange={(e) => setContent(e.target.value)}
                            placeholder={intl.formatMessage({
                                id: 'body_admin.announcement_management.create.content_placeholder',
                                defaultMessage: 'Nh·∫≠p n·ªôi dung th√¥ng b√°o (t√πy ch·ªçn)'
                            })}
                            rows="3"
                        />
                    </div>

                    {/* Preview */}
                    <div className="form-group">
                        <label><FormattedMessage id="body_admin.announcement_management.create.preview" defaultMessage="Xem tr∆∞·ªõc:" /></label>
                        <div className="preview-container">
                            <strong>
                                <span>{icon}</span>
                                {title || intl.formatMessage({
                                    id: 'body_admin.announcement_management.create.title_placeholder_preview',
                                    defaultMessage: 'Ti√™u ƒë·ªÅ th√¥ng b√°o'
                                })}
                                {content && ` - ${content}`}
                            </strong>
                        </div>
                    </div>
                </div>

                <div className="form-actions">
                    <button className="btn-submit" type="submit" disabled={loading}>
                        {loading ?
                            <FormattedMessage id="body_admin.announcement_management.create.loading" defaultMessage="ƒêang t·∫°o..." /> :
                            <FormattedMessage id="body_admin.announcement_management.create.submit" defaultMessage="T·∫°o Th√¥ng B√°o" />
                        }
                    </button>
                    <button
                        type="button"
                        className="btn-cancel"
                        onClick={() => navigate('/admin/homepage-management/announcement-management')}
                        disabled={loading}
                    >
                        <FormattedMessage id="body_admin.announcement_management.create.cancel" defaultMessage="H·ªßy" />
                    </button>
                </div>
            </form>
        </div>
    );
};

export default AnnouncementCreate;
