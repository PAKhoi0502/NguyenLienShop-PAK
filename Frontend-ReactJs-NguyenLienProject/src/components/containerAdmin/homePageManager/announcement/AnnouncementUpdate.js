import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { toast } from 'react-toastify';
import { useIntl, FormattedMessage } from 'react-intl';
import Swal from 'sweetalert2';
import { getAnnouncements, updateAnnouncement } from '../../../../services/announcementService';
import CustomToast from '../../../../components/CustomToast';
import './AnnouncementUpdate.scss';

const AnnouncementUpdate = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const intl = useIntl();

    const [announcement, setAnnouncement] = useState(null);
    const [loading, setLoading] = useState(false);

    const showToast = (type, message) => {
        toast(
            (props) => (
                <CustomToast
                    {...props}
                    type={type}
                    titleId={type === 'success' ? 'body_admin.announcement_management.update.success_title' : 'body_admin.announcement_management.update.error_title'}
                    message={message}
                    time={new Date()}
                />
            ),
            { closeButton: false, type }
        );
    };

    // Predefined emoji icons for selection
    const emojiIcons = [
        { value: 'üì¢', label: 'üì¢ Th√¥ng b√°o chung' },
        { value: '‚ÑπÔ∏è', label: '‚ÑπÔ∏è Th√¥ng tin' },
        { value: '‚úÖ', label: '‚úÖ Th√†nh c√¥ng' },
        { value: '‚ö†Ô∏è', label: '‚ö†Ô∏è C·∫£nh b√°o' },
        { value: 'üéâ', label: 'üéâ Ch√∫c m·ª´ng' },
        { value: 'üîß', label: 'üîß B·∫£o tr√¨' },
        { value: 'üöÄ', label: 'üöÄ C·∫≠p nh·∫≠t' },
        { value: 'üéÅ', label: 'üéÅ Khuy·∫øn m√£i' },
        { value: 'üí∞', label: 'üí∞ Gi·∫£m gi√°' },
        { value: '‚ùå', label: '‚ùå L·ªói' }
    ];


    useEffect(() => {
        const fetchAnnouncement = async () => {
            try {
                const res = await getAnnouncements();
                if (res.errCode === 0) {
                    const found = res.announcements.find(item => String(item.id) === String(id));
                    if (!found) {
                        showToast('error', intl.formatMessage({ id: 'body_admin.announcement_management.update.not_found', defaultMessage: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' }));
                        return navigate('/admin/homepage-management/announcement-management');
                    }
                    setAnnouncement(found);
                } else {
                    showToast('error', res.errMessage || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch th√¥ng b√°o');
                }
            } catch (err) {
                console.error(err);
                showToast('error', intl.formatMessage({ id: 'body_admin.announcement_management.update.load_error', defaultMessage: 'L·ªói khi t·∫£i th√¥ng b√°o' }));
                navigate('/admin/homepage-management/announcement-management');
            }
        };
        fetchAnnouncement();
    }, [id, navigate, intl]);

    const handleChange = (field, value) => {
        setAnnouncement({ ...announcement, [field]: value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        // Validation
        if (!announcement.title || !announcement.title.trim()) {
            showToast('error', intl.formatMessage({ id: 'body_admin.announcement_management.update.no_title', defaultMessage: 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o' }));
            return;
        }

        if (!announcement.content || !announcement.content.trim()) {
            showToast('error', intl.formatMessage({ id: 'body_admin.announcement_management.update.no_content', defaultMessage: 'Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o' }));
            return;
        }

        // Step 1: Initial Confirmation
        const confirmFirst = await Swal.fire({
            title: intl.formatMessage({ id: 'body_admin.announcement_management.update.confirm_title_1', defaultMessage: 'X√°c nh·∫≠n c·∫≠p nh·∫≠t th√¥ng b√°o' }),
            html: `<strong>${announcement.title || intl.formatMessage({ id: 'body_admin.announcement_management.update.no_title_name', defaultMessage: 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ th√¥ng b√°o' })}</strong><br>ID: ${announcement.id}`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: intl.formatMessage({ id: 'body_admin.announcement_management.update.confirm_button_1', defaultMessage: 'Ti·∫øp t·ª•c' }),
            cancelButtonText: intl.formatMessage({ id: 'body_admin.announcement_management.update.cancel_button', defaultMessage: 'H·ªßy' })
        });

        if (!confirmFirst.isConfirmed) return;

        // Step 2: Secondary Confirmation
        const confirmSecond = await Swal.fire({
            title: intl.formatMessage({ id: 'body_admin.announcement_management.update.confirm_title_2', defaultMessage: 'B·∫°n ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t?' }),
            text: intl.formatMessage({ id: 'body_admin.announcement_management.update.confirm_text_2', defaultMessage: 'Th√¥ng tin th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c thay ƒë·ªïi!' }),
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: intl.formatMessage({ id: 'body_admin.announcement_management.update.confirm_button_2', defaultMessage: 'C·∫≠p nh·∫≠t' }),
            cancelButtonText: intl.formatMessage({ id: 'body_admin.announcement_management.update.cancel_button', defaultMessage: 'H·ªßy' })
        });

        if (!confirmSecond.isConfirmed) return;

        // Step 3: Text confirmation - Type exact phrase
        const confirmText = await Swal.fire({
            title: intl.formatMessage({ id: 'body_admin.announcement_management.update.security_title', defaultMessage: 'X√°c nh·∫≠n b·∫£o m·∫≠t' }),
            html: `
               <div style="text-align: left; margin: 20px 0;">
                  <p style="margin-bottom: 15px; color: #ef4444; font-weight: 600;">
                     ${intl.formatMessage({ id: 'body_admin.announcement_management.update.security_warning', defaultMessage: 'C·∫£nh b√°o: H√†nh ƒë·ªông n√†y s·∫Ω c·∫≠p nh·∫≠t th√¥ng tin th√¥ng b√°o!' })}
                  </p>
                  <p style="margin-bottom: 10px; color: #374151;">
                     ${intl.formatMessage({ id: 'body_admin.announcement_management.update.security_confirm_text', defaultMessage: 'Th√¥ng b√°o c·∫ßn c·∫≠p nh·∫≠t' })}: <strong style="color: #dc2626;">${announcement.title || intl.formatMessage({ id: 'body_admin.announcement_management.update.no_title_name', defaultMessage: 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ th√¥ng b√°o' })}</strong>
                  </p>
                  <p style="margin-bottom: 15px; color: #374151;">
                     ${intl.formatMessage({ id: 'body_admin.announcement_management.update.security_type_exact', defaultMessage: 'Nh·∫≠p ch√≠nh x√°c c·ª•m t·ª´' })}: <code style="background: #f3f4f6; padding: 2px 6px; border-radius: 4px; color: #dc2626; font-weight: 600;">${intl.formatMessage({ id: 'body_admin.announcement_management.update.security_phrase', defaultMessage: 'C·∫¨P NH·∫¨T TH√îNG B√ÅO' })}</code>
                  </p>
               </div>
            `,
            input: 'text',
            inputPlaceholder: intl.formatMessage({ id: 'body_admin.announcement_management.update.security_placeholder', defaultMessage: 'Nh·∫≠p c·ª•m t·ª´ x√°c nh·∫≠n...' }),
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: intl.formatMessage({ id: 'body_admin.announcement_management.update.security_continue', defaultMessage: 'Ti·∫øp t·ª•c c·∫≠p nh·∫≠t' }),
            cancelButtonText: intl.formatMessage({ id: 'body_admin.announcement_management.update.cancel_button', defaultMessage: 'H·ªßy' }),
            inputValidator: (value) => {
                const expectedPhrase = intl.formatMessage({ id: 'body_admin.announcement_management.update.security_phrase', defaultMessage: 'C·∫¨P NH·∫¨T TH√îNG B√ÅO' });
                if (value !== expectedPhrase) {
                    return intl.formatMessage({ id: 'body_admin.announcement_management.update.security_error', defaultMessage: 'C·ª•m t·ª´ kh√¥ng ch√≠nh x√°c. Vui l√≤ng nh·∫≠p ƒë√∫ng c·ª•m t·ª´ ƒë∆∞·ª£c y√™u c·∫ßu.' });
                }
            },
            customClass: {
                popup: 'swal-update-step3',
                input: 'swal-text-input'
            }
        });

        if (!confirmText.isConfirmed) return;

        setLoading(true);

        try {
            const dataToSend = {
                title: announcement.title || '',
                content: announcement.content || '',
                icon: announcement.icon || 'üì¢',
                isActive: announcement.isActive
            };

            const res = await updateAnnouncement(id, dataToSend);

            if (res && res.errCode === 0) {
                showToast('success', intl.formatMessage({ id: 'body_admin.announcement_management.update.success', defaultMessage: 'C·∫≠p nh·∫≠t th√¥ng b√°o th√†nh c√¥ng' }));
                navigate('/admin/homepage-management/announcement-management');
            } else {
                showToast('error', res?.errMessage || intl.formatMessage({ id: 'body_admin.announcement_management.update.error', defaultMessage: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng b√°o' }));
            }
        } catch (err) {
            console.error(err);
            showToast('error', intl.formatMessage({ id: 'body_admin.announcement_management.update.server_error', defaultMessage: 'L·ªói server khi c·∫≠p nh·∫≠t th√¥ng b√°o' }));
        } finally {
            setLoading(false);
        }
    };

    if (!announcement) return (
        <div className="announcement-detail-loading">
            <FormattedMessage id="body_admin.announcement_management.update.loading_data" defaultMessage="ƒêang t·∫£i d·ªØ li·ªáu..." />
        </div>
    );

    return (
        <div className="announcement-update-container">
            <h1><FormattedMessage id="body_admin.announcement_management.update.title" defaultMessage="C·∫≠p Nh·∫≠t Th√¥ng B√°o" /></h1>
            <form onSubmit={handleSubmit} className="announcement-update-form">
                <div className="form-group">
                    <label><FormattedMessage id="body_admin.announcement_management.update.icon" defaultMessage="Bi·ªÉu t∆∞·ª£ng:" /></label>
                    <select
                        value={announcement.icon || 'üì¢'}
                        onChange={(e) => handleChange('icon', e.target.value)}
                        style={{ fontSize: '16px', padding: '8px' }}
                    >
                        {emojiIcons.map(iconOption => (
                            <option key={iconOption.value} value={iconOption.value}>
                                {iconOption.label}
                            </option>
                        ))}
                    </select>
                </div>

                <div className="form-group">
                    <label><FormattedMessage id="body_admin.announcement_management.update.title_label" defaultMessage="Ti√™u ƒë·ªÅ:" /></label>
                    <input
                        type="text"
                        value={announcement.title || ''}
                        onChange={(e) => handleChange('title', e.target.value)}
                        required
                    />
                </div>

                <div className="form-group">
                    <label><FormattedMessage id="body_admin.announcement_management.update.content_label" defaultMessage="N·ªôi dung:" /></label>
                    <textarea
                        value={announcement.content || ''}
                        onChange={(e) => handleChange('content', e.target.value)}
                        rows="4"
                    />
                </div>

                <div className="form-actions">
                    <button
                        className='btn-submit'
                        type="submit"
                        disabled={loading}
                    >
                        {loading ? <FormattedMessage id="body_admin.announcement_management.update.loading" defaultMessage="ƒêang c·∫≠p nh·∫≠t..." /> : <FormattedMessage id="body_admin.announcement_management.update.submit" defaultMessage="C·∫≠p Nh·∫≠t" />}
                    </button>
                    <button
                        type="button"
                        className="btn-cancel"
                        onClick={() => navigate(-1)}
                        disabled={loading}
                    >
                        <FormattedMessage id="body_admin.announcement_management.update.cancel" defaultMessage="H·ªßy" />
                    </button>
                </div>
            </form>
        </div>
    );
};

export default AnnouncementUpdate;
