/**
 * Mock SMS Service for OTP functionality
 * Logs to console instead of sending real SMS
 * Perfect for development and testing
 */

// Store OTP codes in memory for development (don't use in production)
const otpStore = new Map();

/**
 * Generate 6-digit OTP code
 */
const generateOTP = () => {
    return Math.floor(100000 + Math.random() * 900000).toString();
};

/**
 * Send OTP to phone number (Mock - logs to console)
 * @param {string} phoneNumber - Vietnamese phone number
 * @returns {Promise<{success: boolean, message: string, otpCode?: string}>}
 */
export const sendOTP = async (phoneNumber) => {
    try {
        // Simulate network delay
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Generate OTP
        const otpCode = generateOTP();

        // Store OTP with expiration time (5 minutes)
        const expiresAt = Date.now() + (5 * 60 * 1000);
        otpStore.set(phoneNumber, {
            code: otpCode,
            expiresAt,
            attempts: 0,
            maxAttempts: 3
        });

        // Mock console log instead of real SMS
        console.log(`üì± [MOCK SMS SERVICE] ===========================`);
        console.log(`üìû G·ª≠i OTP ƒë·∫øn: ${phoneNumber}`);
        console.log(`üî¢ M√£ OTP: ${otpCode}`);
        console.log(`‚è∞ C√≥ hi·ªáu l·ª±c: 5 ph√∫t`);
        console.log(`üì± [MOCK SMS] N·ªôi dung: "NguyenLienShop - M√£ x√°c th·ª±c: ${otpCode}. C√≥ hi·ªáu l·ª±c 5 ph√∫t."`);
        console.log(`===============================================`);

        return {
            success: true,
            message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n",
            // Include OTP for development only (remove in production)
            otpCode: process.env.NODE_ENV === 'development' ? otpCode : undefined
        };

    } catch (error) {
        console.error(`‚ùå [MOCK SMS ERROR]:`, error);
        return {
            success: false,
            message: "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i."
        };
    }
};

/**
 * Verify OTP code
 * @param {string} phoneNumber - Vietnamese phone number
 * @param {string} otpCode - 6-digit OTP code
 * @returns {Promise<{success: boolean, message: string}>}
 */
export const verifyOTP = async (phoneNumber, otpCode) => {
    try {
        // Simulate network delay
        await new Promise(resolve => setTimeout(resolve, 500));

        const storedOTP = otpStore.get(phoneNumber);

        if (!storedOTP) {
            console.log(`‚ùå [MOCK VERIFY] Kh√¥ng t√¨m th·∫•y OTP cho s·ªë: ${phoneNumber}`);
            return {
                success: false,
                message: "M√£ OTP kh√¥ng t·ªìn t·∫°i. Vui l√≤ng g·ª≠i l·∫°i m√£ m·ªõi."
            };
        }

        // Check expiration
        if (Date.now() > storedOTP.expiresAt) {
            console.log(`‚è∞ [MOCK VERIFY] OTP ƒë√£ h·∫øt h·∫°n cho s·ªë: ${phoneNumber}`);
            otpStore.delete(phoneNumber);
            return {
                success: false,
                message: "M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng g·ª≠i l·∫°i m√£ m·ªõi."
            };
        }

        // Check max attempts
        if (storedOTP.attempts >= storedOTP.maxAttempts) {
            console.log(`üö´ [MOCK VERIFY] V∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ cho s·ªë: ${phoneNumber}`);
            otpStore.delete(phoneNumber);
            return {
                success: false,
                message: "B·∫°n ƒë√£ nh·∫≠p sai qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng g·ª≠i l·∫°i m√£ m·ªõi."
            };
        }

        // Increment attempt counter
        storedOTP.attempts += 1;
        otpStore.set(phoneNumber, storedOTP);

        // Verify code
        if (otpCode === storedOTP.code) {
            console.log(`‚úÖ [MOCK VERIFY] OTP h·ª£p l·ªá cho s·ªë: ${phoneNumber}`);
            // Remove OTP after successful verification
            otpStore.delete(phoneNumber);
            return {
                success: true,
                message: "X√°c th·ª±c OTP th√†nh c√¥ng!"
            };
        } else {
            console.log(`‚ùå [MOCK VERIFY] OTP kh√¥ng ƒë√∫ng. L·∫ßn th·ª≠: ${storedOTP.attempts}/${storedOTP.maxAttempts}`);
            return {
                success: false,
                message: `M√£ OTP kh√¥ng ƒë√∫ng. C√≤n ${storedOTP.maxAttempts - storedOTP.attempts} l·∫ßn th·ª≠.`
            };
        }

    } catch (error) {
        console.error(`‚ùå [MOCK VERIFY ERROR]:`, error);
        return {
            success: false,
            message: "ƒê√£ x·∫£y ra l·ªói khi x√°c th·ª±c OTP. Vui l√≤ng th·ª≠ l·∫°i."
        };
    }
};

/**
 * Resend OTP (with rate limiting)
 * @param {string} phoneNumber - Vietnamese phone number
 * @returns {Promise<{success: boolean, message: string}>}
 */
export const resendOTP = async (phoneNumber) => {
    try {
        const storedOTP = otpStore.get(phoneNumber);

        // Check if can resend (not too frequent)
        if (storedOTP && storedOTP.lastSent && (Date.now() - storedOTP.lastSent) < 60000) {
            const waitTime = Math.ceil((60000 - (Date.now() - storedOTP.lastSent)) / 1000);
            console.log(`‚è≥ [MOCK RESEND] Ph·∫£i ƒë·ª£i ${waitTime}s tr∆∞·ªõc khi g·ª≠i l·∫°i`);
            return {
                success: false,
                message: `Vui l√≤ng ƒë·ª£i ${waitTime} gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i m√£.`
            };
        }

        // Send new OTP
        const result = await sendOTP(phoneNumber);
        if (result.success && storedOTP) {
            // Update last sent time
            const newStoredOTP = otpStore.get(phoneNumber);
            newStoredOTP.lastSent = Date.now();
            otpStore.set(phoneNumber, newStoredOTP);
        }

        return result;

    } catch (error) {
        console.error(`‚ùå [MOCK RESEND ERROR]:`, error);
        return {
            success: false,
            message: "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i l·∫°i OTP. Vui l√≤ng th·ª≠ l·∫°i."
        };
    }
};

/**
 * Clear stored OTP (for cleanup)
 * @param {string} phoneNumber - Vietnamese phone number
 */
export const clearOTP = (phoneNumber) => {
    otpStore.delete(phoneNumber);
    console.log(`üóëÔ∏è [MOCK CLEAR] ƒê√£ x√≥a OTP cho s·ªë: ${phoneNumber}`);
};

/**
 * Get development info (only for testing)
 * @param {string} phoneNumber - Vietnamese phone number
 * @returns {object|null} OTP info for debugging
 */
export const getOTPInfo = (phoneNumber) => {
    if (process.env.NODE_ENV !== 'development') {
        return null;
    }

    const storedOTP = otpStore.get(phoneNumber);
    if (!storedOTP) return null;

    return {
        code: storedOTP.code,
        expiresIn: Math.max(0, Math.ceil((storedOTP.expiresAt - Date.now()) / 1000)),
        attempts: storedOTP.attempts,
        maxAttempts: storedOTP.maxAttempts
    };
};

// Export default functions for convenience
const mockSmsService = {
    sendOTP,
    verifyOTP,
    resendOTP,
    clearOTP,
    getOTPInfo
};

export default mockSmsService;